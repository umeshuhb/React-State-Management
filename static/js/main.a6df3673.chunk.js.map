{"version":3,"sources":["components/MovieContext.js","components/Sidebar.js","components/Movie.js","components/MovieList.js","components/AddMovie.js","App.js","serviceWorker.js","index.js"],"names":["MovieContext","createContext","MovieProvider","props","useState","name","price","id","movies","setMovies","Provider","value","children","Sidebar","this","context","length","Component","contextType","Movie","movie","Movielist","useContext","className","map","key","AddMovie","movieName","setMovieName","moviePrice","setMoviePrice","onSubmit","e","preventDefault","trim","prevMovies","type","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAEaA,EAAeC,0BAEfC,EAAgB,SAAAC,GAAS,IAAD,EACLC,mBAAS,CAAC,CAClCC,KAAO,YACPC,MAAQ,MACRC,GAAK,KACP,CACEF,KAAO,aACPC,MAAQ,MACRC,GAAK,KACP,CACEF,KAAO,OACPC,MAAQ,MACRC,GAAI,KACN,CACEF,KAAO,kBACPC,MAAQ,MACRC,GAAI,KACN,CACEF,KAAO,YACPC,MAAQ,MACRC,GAAI,KAER,CACIF,KAAO,aACPC,MAAQ,MACRC,GAAI,OAzByB,mBAC1BC,EAD0B,KAClBC,EADkB,KA6BjC,OACI,kBAACT,EAAaU,SAAd,CAAuBC,MAAO,CAACH,EAAQC,IAClCN,EAAMS,WChCbC,E,uKAIQ,IAAD,cACuBC,KAAKC,QAD5B,GACEP,EADF,UAEL,OACI,yCACcA,EAAOQ,OADrB,MAC+B,kC,GARrBC,aAAhBJ,EAEKK,YAAclB,EAYVa,QCPAM,G,MARD,SAAChB,GAEX,IAAMiB,EAAQjB,EAAMiB,MACpB,OACI,4BAAKA,EAAMf,KAAX,IAAiB,mCAASe,EAAMd,MAAf,QCYVe,EAbG,WAAK,IAAD,EAESC,qBAAWtB,GAFpB,mBAEXQ,EAFW,UAIlB,OACI,yBAAKe,UAAU,aACdf,EAAOgB,KAAK,SAAAJ,GAAK,OAClB,kBAAC,EAAD,CAAOA,MAAOA,EAAOK,IAAKL,EAAMb,U,OCgBzBmB,EAzBE,WAAK,IAAD,EAEWJ,qBAAWtB,GAFtB,mBAEVQ,EAFU,KAEFC,EAFE,OAGiBL,mBAAS,IAH1B,mBAGVuB,EAHU,KAGCC,EAHD,OAImBxB,mBAAS,IAJ5B,mBAIVyB,EAJU,KAIEC,EAJF,KAejB,OACI,0BAAMC,SAVQ,SAACC,GACfA,EAAEC,iBACsB,KAArBN,EAAUO,QAAuC,KAAtBL,EAAWK,SACrCzB,GAAU,SAAC0B,GAAD,4BAAoBA,GAApB,CAAgC,CAAC9B,KAAMsB,EAAWrB,MAAOuB,EAAYtB,GAAKC,EAAOQ,OAAS,QACpGY,EAAa,IACbE,EAAc,OAMd,2BAAOM,KAAK,OAAO/B,KAAK,YAAYM,MAAOgB,EAAWU,SAAW,SAACL,GAAD,OAAMJ,EAAaI,EAAEM,OAAO3B,QAAS4B,YAAY,eAClH,2BAAOH,KAAK,SAAS/B,KAAK,QAAQM,MAAOkB,EAAYQ,SAAU,SAACL,GAAD,OAAMF,EAAcE,EAAEM,OAAO3B,QAAQ4B,YAAY,gBAChH,2BAAOH,KAAK,aCDTI,MAdf,WACI,OACI,yBAAKjB,UAAU,OACX,kBAAC,EAAD,KACI,4BAAQA,UAAU,cACV,kBAAC,EAAD,OAER,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHIkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a6df3673.chunk.js","sourcesContent":["import React, {useState, createContext} from 'react';\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieProvider = props =>{\r\n    const [movies, setMovies] = useState([{\r\n        name : \"Toy Story\",\r\n        price : \"150\",\r\n        id : 123\r\n    },{\r\n        name : \"Bug's Life\",\r\n        price : \"125\",\r\n        id : 456\r\n    },{\r\n        name : \"Cars\",\r\n        price : \"150\",\r\n        id: 410\r\n    },{\r\n        name : \"The Jungle Book\",\r\n        price : \"185\",\r\n        id: 411\r\n    },{\r\n        name : \"Lion King\",\r\n        price : \"185\",\r\n        id: 412\r\n    },\r\n    {\r\n        name : \"Madagascar\",\r\n        price : \"185\",\r\n        id: 413\r\n    }\r\n    ]);\r\n\r\n    return (\r\n        <MovieContext.Provider value={[movies, setMovies]} >\r\n            {props.children}\r\n        </MovieContext.Provider>\r\n    )\r\n\r\n}","import React, { Component } from 'react'\r\nimport {MovieContext} from \"./MovieContext\";\r\n\r\nclass Sidebar extends Component {\r\n\r\n    static contextType = MovieContext;\r\n\r\n    render() {\r\n        const [movies, setMovies] = this.context;\r\n        return (\r\n            <div>\r\n                Movies : {movies.length}   <br/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sidebar","import React from 'react';\r\n\r\nconst Movie = (props)=>{\r\n\r\n    const movie = props.movie;\r\n    return(\r\n        <li>{movie.name} <span>(${movie.price})</span></li>\r\n    )\r\n\r\n}\r\nexport default Movie;","import React, {useState, useContext} from 'react';\r\nimport '../MovieList.css';\r\nimport Movie from './Movie';\r\nimport {MovieContext} from './MovieContext';\r\n\r\nconst Movielist = ()=>{\r\n\r\n    const [movies,setMovies] = useContext(MovieContext);\r\n\r\n    return(\r\n        <div className=\"MovieList\">\r\n        {movies.map( movie => (\r\n        <Movie movie={movie} key={movie.id}/>\r\n))}\r\n</div>\r\n);\r\n};\r\n\r\nexport default Movielist;","import React, {useContext, useState} from 'react';\r\nimport {MovieContext} from \"./MovieContext\";\r\n\r\nconst AddMovie = ()=>{\r\n\r\n    const [movies, setMovies] = useContext(MovieContext);\r\n    const [movieName, setMovieName] = useState('');\r\n    const [moviePrice, setMoviePrice] = useState('');\r\n\r\n    const addMovies = (e)=> {\r\n        e.preventDefault();\r\n        if(movieName.trim() !== \"\" && moviePrice.trim() !== \"\" ) {\r\n            setMovies((prevMovies) => [...prevMovies, {name: movieName, price: moviePrice, id: (movies.length + 1)}]);\r\n            setMovieName('');\r\n            setMoviePrice('');\r\n        }\r\n    };\r\n\r\n    return(\r\n        <form onSubmit={addMovies}>\r\n            <input type=\"text\" name=\"movieName\" value={movieName} onChange={ (e)=> setMovieName(e.target.value) } placeholder=\"Movie Name\" />\r\n            <input type=\"number\" name=\"price\" value={moviePrice} onChange={(e)=> setMoviePrice(e.target.value)} placeholder=\"Movie Price\" />\r\n            <input type=\"submit\" />\r\n        </form>\r\n    )\r\n\r\n};\r\n\r\nexport default AddMovie;","import React from 'react';\r\nimport './App.css';\r\nimport Sidebar from './components/Sidebar';\r\nimport Movielist from './components/MovieList';\r\nimport {MovieProvider} from \"./components/MovieContext\";\r\nimport AddMovie from './components/AddMovie';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <MovieProvider>\r\n                <header className=\"App-header\">\r\n                        <Sidebar/>\r\n                </header>\r\n                <AddMovie />\r\n                <Movielist/>\r\n            </MovieProvider>\r\n    </div>\r\n);\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}